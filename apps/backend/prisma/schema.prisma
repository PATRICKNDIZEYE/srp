datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:lionson@localhost:2005/slp"
}
generator client {
  provider = "prisma-client-js"
}

model MilkSubmission {
  id        Int      @id @default(autoincrement()) 
  milkType  String  
  amount    Float   
  notes     String? 
  status    String   // Status of the submission (e.g., Pending, Accepted)
  createdAt DateTime @default(now())  // Timestamp of when the submission was made
  updatedAt DateTime @updatedAt      // Timestamp of the last update
  farmerId  Int      // ID of the farmer who submitted the milk

  farmer    Farmer   @relation("FarmerToMilkSubmission", fields: [farmerId], references: [id])  // Relationship to the Farmer model
}

model User {
  id                Int       @id @default(autoincrement())
  username          String
  email             String    @unique
  password          String
  role              String
  name              String?
  resetToken        String?
  resetTokenExpires DateTime?
  otp               Int?
  otpExpiry         DateTime?
}

model Stock {
  id          Int       @id @default(autoincrement())
  name        String
  data        Json
  productType String
  quantity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  farmer      Farmer?   @relation(fields: [farmerId], references: [id])
  farmerId    Int?      @unique
  
  poc         POC?      @relation(fields: [pocId], references: [id])
  pocId       Int?      @unique
  
  transport   Transport? @relation(fields: [transportId], references: [id])
  transportId Int?       @unique
}

model POC {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  birthday    DateTime
  nationalId  String    @unique
  phoneNumber String
  longitude   Float
  latitude    Float
  username    String    @unique
  password    String
  address     Json
  status      String
  
  farmer      Farmer?   @relation("POCToFarmer")
  farmerId    Int?      @unique
  
  transport   Transport? @relation("POCToTransport")
  transportId Int?       @unique
  
  stocks      Stock[]
}

model Farmer {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  birthday    DateTime
  nationalId  String    @unique
  phoneNumber String
  longitude   Float
  latitude    Float
  username    String    @unique
  password    String
  farmDetails Json
  status      String
  
  poc         POC?      @relation("POCToFarmer", fields: [pocId], references: [id])
  pocId       Int?      @unique
  
  stocks      Stock[]
  
  milkSubmissions MilkSubmission[] @relation("FarmerToMilkSubmission")
}

model Transport {
  id              Int       @id @default(autoincrement())
  firstName       String
  lastName        String
  birthday        DateTime
  nationalId      String    @unique
  phoneNumber     String
  longitude       Float
  latitude        Float
  username        String    @unique
  password        String
  status          String
  delivered       Json?
  
  poc             POC?      @relation("POCToTransport", fields: [pocId], references: [id])
  pocId           Int?      @unique
  
  diary           Diary?
  
  stocks          Stock[]
  derivedData     Derived[]
}

model Derived {
  id            Int       @id @default(autoincrement())
  transportId   Int
  diaryId       Int?
  data          Json
  createdAt     DateTime  @default(now())
  
  transport     Transport @relation(fields: [transportId], references: [id])
  diary         Diary?    @relation(fields: [diaryId], references: [id])
}

model Diary {
  id             Int       @id @default(autoincrement())
  entryDate      DateTime  @default(now())
  status         String
  remarks        String?
  transportId    Int       @unique
  transport      Transport @relation(fields: [transportId], references: [id])
  approveStatus  String    @default("pending")
  derivedData    Derived[]
}

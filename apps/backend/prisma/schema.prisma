datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:lionson@localhost:2005/slp"
}

generator client {
  provider = "prisma-client-js"
}

model MilkSubmission {
  id        Int      @id @default(autoincrement()) 
  milkType  String  
  amount    Float   
  notes     String? 
  status    String  
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt     
  farmerId  Int      

  farmer    Farmer   @relation("FarmerToMilkSubmission", fields: [farmerId], references: [id])  // Relationship to the Farmer model
}

model User {
  id                Int       @id @default(autoincrement())
  username          String
  email             String    @unique
  phone             String    @unique
  password          String
  role              String
  name              String?
  resetToken        String?
  resetTokenExpires DateTime?
  otp               Int?
  otpExpiry         DateTime?
}

model Stock {
  id          Int       @id @default(autoincrement())
  name        String
  data        Json
  productType String
  quantity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  farmer      Farmer?   @relation(fields: [farmerId], references: [id])
  farmerId    Int?      @unique
  
  poc         POC?      @relation(fields: [pocId], references: [id])
  pocId       Int?      @unique
  
  transport   Transport? @relation(fields: [transportId], references: [id])
  transportId Int?       @unique
}

model POC {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  birthday    DateTime
  nationalId  String    @unique
  phoneNumber String    @unique
  longitude   Float
  latitude    Float
  username    String    @unique
  password    String
  address     Json
  status      String
  
  farmer      Farmer?   @relation("POCToFarmer")
  farmerId    Int?      @unique
  
  transport   Transport? @relation("POCToTransport")
  transportId Int?       @unique
  
  stocks      Stock[]
  deliveries  Derivery[]  @relation("POCToDerivery")
}

model Farmer {
  id                Int       @id @default(autoincrement())
  firstName         String
  lastName          String
  birthday          DateTime
  nationalId        String    @unique
  phoneNumber       String    @unique
  longitude         Float
  latitude          Float
  username          String    @unique
  password          String
  farmDetails       Json
  status            String
  
  poc               POC?      @relation("POCToFarmer", fields: [pocId], references: [id])
  pocId             Int?      @unique
  
  stocks            Stock[]
  milkSubmissions   MilkSubmission[] @relation("FarmerToMilkSubmission")
  
  loans             Loan[]  
}

model Transport {
  id              Int       @id @default(autoincrement())
  firstName       String
  lastName        String
  birthday        DateTime
  nationalId      String    @unique
  phoneNumber     String    @unique
  longitude       Float
  latitude        Float
  username        String    @unique
  password        String
  status          String
  delivered       Json?
  
  poc             POC?      @relation("POCToTransport", fields: [pocId], references: [id])
  pocId           Int?      @unique
  
  
  stocks          Stock[]
  derivedData     Derivery[]

  derivedEntries  Derived[] @relation("TransportToDerived")
}

model Derivery {
  id               Int        @id @default(autoincrement())
  transportId      Int
  pocId            Int
  amount           Float
  transportStatus  String
  date             DateTime   @default(now())

  transport        Transport  @relation(fields: [transportId], references: [id])
  poc              POC        @relation("POCToDerivery", fields: [pocId], references: [id])
  derivedEntries   Derived[]
}

model Derived {
  id          Int      @id @default(autoincrement())
  diaryId     Int
  transportId Int
  deriveryId  Int
  amount      Float
  status      String
  date        DateTime @default(now())

  diary       Diary     @relation("DiaryToDerived", fields: [diaryId], references: [id])
  transport   Transport @relation("TransportToDerived", fields: [transportId], references: [id])
  derivery    Derivery  @relation(fields: [deriveryId], references: [id])
}

model Diary {
  id             Int       @id @default(autoincrement())
  status         String
  approveStatus  String    @default("pending")
  phoneNumber    String    @unique
  password       String
  longitude      Float
  latitude       Float

  derivedEntries Derived[] @relation("DiaryToDerived")
}

model Loan {
  id            Int      @id @default(autoincrement())
  loanAmount    Float  
  purpose       String  
  status        LoanStatus 
  requestDate   DateTime @default(now()) 
  farmerId      Int     
  farmer        Farmer   @relation(fields: [farmerId], references: [id])

  @@index([farmerId])
}

enum LoanStatus {
  Pending
  Approved
  Completed
  Rejected
}
